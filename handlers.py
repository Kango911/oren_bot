from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler
from config import States
from database import Database
from keyboards import main_menu_keyboard, dates_keyboard, events_keyboard, confirmation_keyboard, \
    unregister_events_keyboard
import re

db = Database()


async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    telegram_id = user.id
    context.user_data['telegram_id'] = telegram_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –≤–æ–ª–æ–Ω—Ç–µ—Ä
    volunteer = db.get_volunteer_by_telegram_id(telegram_id)

    if volunteer:
        # –í–æ–ª–æ–Ω—Ç–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await update.message.reply_text(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {volunteer['full_name']}! üëã\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END
    else:
        # –ù–æ–≤—ã–π –≤–æ–ª–æ–Ω—Ç–µ—Ä - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
            "–Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∫–∏–Ω–æ—Ñ–µ—Å—Ç–∏–≤–∞–ª—è.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–º –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX:"
        )
        return States.PHONE


async def get_phone(update: Update, context: CallbackContext) -> int:
    phone = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not re.match(r'^(\+7|8)\d{10}$', phone):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX:"
        )
        return States.PHONE

    context.user_data['phone'] = phone
    await update.message.reply_text("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–ø–æ–ª–Ω–æ—Å—Ç—å—é):")
    return States.FIO


async def get_fio(update: Update, context: CallbackContext) -> int:
    fio = update.message.text.strip()

    if len(fio) < 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –§–ò–û
        await update.message.reply_text("‚ùå –§–ò–û —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û:")
        return States.FIO

    context.user_data['fio'] = fio

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    telegram_id = context.user_data['telegram_id']
    phone = context.user_data['phone']

    volunteer_id = db.add_volunteer(telegram_id, phone, fio)

    if volunteer_id:
        await update.message.reply_text(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {fio}!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∫–∏–Ω–æ—Ñ–µ—Å—Ç–∏–≤–∞–ª—è.",
            reply_markup=main_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
        )

    return ConversationHandler.END


async def cancel_registration(update: Update, context: CallbackContext) -> int:
    if update.message:
        await update.message.reply_text(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )
    elif update.callback_query:
        query = update.callback_query
        await query.edit_message_text(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )
    return ConversationHandler.END


async def button_click(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()  # –û—Ç–≤–µ—Ç –Ω–∞ callback query —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    data = query.data
    user_id = context.user_data.get('telegram_id', query.from_user.id)

    # –û–±–Ω–æ–≤–ª—è–µ–º telegram_id –≤ context.user_data
    if 'telegram_id' not in context.user_data:
        context.user_data['telegram_id'] = user_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä
    volunteer = db.get_volunteer_by_telegram_id(user_id)

    if not volunteer and data not in ['cancel', 'help']:
        await query.edit_message_text(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–ª–æ–Ω—Ç–µ—Ä.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /start"
        )
        return

    if data == 'register':
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
            reply_markup=dates_keyboard()
        )

    elif data.startswith('date_'):
        date = data.split('_')[1]
        context.user_data['selected_date'] = date

        events = db.get_events_by_date(date)
        if not events:
            await query.edit_message_text(
                f"–ù–∞ {date} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=dates_keyboard()
            )
            return

        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ {date}:",
            reply_markup=events_keyboard(date)
        )

    elif data.startswith('event_'):
        event_id = int(data.split('_')[1])
        context.user_data['selected_event_id'] = event_id

        event = db.get_event_by_id(event_id)
        if not event:
            await query.edit_message_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        current_count = db.get_registrations_count(event_id)
        available_slots = event['max_volunteers'] - current_count

        await query.edit_message_text(
            f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏:\n\n"
            f"üìÖ –î–∞—Ç–∞: {event['date']}\n"
            f"üïí –í—Ä–µ–º—è: {event['start_time']} - {event['end_time']}\n"
            f"üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ: {event['title']}\n"
            f"üîû –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {event['age_limit']}\n"
            f"üë• –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {available_slots}/{event['max_volunteers']}\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:",
            reply_markup=confirmation_keyboard()
        )

    elif data == 'confirm':
        event_id = context.user_data.get('selected_event_id')
        if not event_id:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.")
            return

        volunteer = db.get_volunteer_by_telegram_id(user_id)
        if not volunteer:
            await query.edit_message_text("‚ùå –í–æ–ª–æ–Ω—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
            return

        success, message = db.register_volunteer_for_event(volunteer['id'], event_id)
        await query.edit_message_text(message)

        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            event = db.get_event_by_id(event_id)
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!\n\n"
                     f"üìÖ –î–∞—Ç–∞: {event['date']}\n"
                     f"üïí –í—Ä–µ–º—è: {event['start_time']} - {event['end_time']}\n"
                     f"üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ: {event['title']}\n\n"
                     f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–æ–π—Ç–∏ –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞!"
            )

    elif data == 'my_events':
        volunteer = db.get_volunteer_by_telegram_id(user_id)
        if volunteer:
            registrations = db.get_volunteer_registrations(volunteer['id'])
            if registrations:
                events_text = "üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
                for i, reg in enumerate(registrations, 1):
                    events_text += f"{i}. üìÖ {reg['date']} {reg['start_time']}\n   üé¨ {reg['title']}\n\n"
                await query.edit_message_text(events_text)
            else:
                await query.edit_message_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")

    elif data == 'unregister':
        volunteer = db.get_volunteer_by_telegram_id(user_id)
        if volunteer:
            registrations = db.get_volunteer_registrations(volunteer['id'])
            if registrations:
                await query.edit_message_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è:",
                    reply_markup=unregister_events_keyboard(volunteer['id'])
                )
            else:
                await query.edit_message_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")

    elif data.startswith('unreg_'):
        event_id = int(data.split('_')[1])
        volunteer = db.get_volunteer_by_telegram_id(user_id)

        if volunteer:
            success, message = db.unregister_volunteer_from_event(volunteer['id'], event_id)
            await query.edit_message_text(message)

            if success:
                event = db.get_event_by_id(event_id)
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
                         f"üìÖ {event['date']} {event['start_time']}\n"
                         f"üé¨ {event['title']}"
                )

    elif data == 'help':
        await query.edit_message_text(
            "ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é/—Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ üìù –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
            "‚Ä¢ üìã –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏\n"
            "‚Ä¢ ‚ùå –û—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"
        )

    elif data in ['back_to_main', 'cancel']:
        await query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard()
        )

    elif data == 'back_to_dates':
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
            reply_markup=dates_keyboard()
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    elif data == 'cancel_registration':
        await query.edit_message_text(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )
        return ConversationHandler.END


async def help_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é/—Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ üìù –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
        "‚Ä¢ üìã –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏\n"
        "‚Ä¢ ‚ùå –û—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"
    )