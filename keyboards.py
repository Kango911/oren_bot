from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from database import Database

db = Database()


def main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data='register')],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data='my_events')],
        [InlineKeyboardButton("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data='unregister')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')],
        [InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin')]
    ]
    return InlineKeyboardMarkup(keyboard)


def dates_keyboard():
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    events = db.get_all_events()
    dates = set()
    for event in events:
        dates.add(event['date'])

    dates = sorted(list(dates))
    keyboard = []
    for date in dates:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_date = date.strftime("%d.%m.%Y") if hasattr(date, 'strftime') else date
        keyboard.append([InlineKeyboardButton(f"üìÖ {formatted_date}", callback_data=f'date_{date}')])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')])
    return InlineKeyboardMarkup(keyboard)


def events_keyboard(date):
    events = db.get_events_by_date(date)
    keyboard = []
    for event in events:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤
        current_count = db.get_registrations_count(event['id'])
        available_slots = event['max_volunteers'] - current_count
        waiting_count = len(db.get_waiting_list_for_event(event['id']))

        # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        title_short = event['title'][:30] + "..." if len(event['title']) > 30 else event['title']

        status = "‚úÖ" if available_slots > 0 else "‚è≥"
        button_text = f"{status} {event['start_time']} - {title_short} ({available_slots}/{event['max_volunteers']}+{waiting_count})"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f'event_{event["id"]}')])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", callback_data='back_to_dates')])
    return InlineKeyboardMarkup(keyboard)


def confirmation_keyboard():
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='confirm')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
    ]
    return InlineKeyboardMarkup(keyboard)


def unregister_events_keyboard(volunteer_id):
    registrations = db.get_volunteer_registrations(volunteer_id)
    waiting_list = db.get_volunteer_waiting_list(volunteer_id)
    keyboard = []

    for reg in registrations:
        # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        title_short = reg['title'][:30] + "..." if len(reg['title']) > 30 else reg['title']
        button_text = f"‚úÖ {reg['date']} {reg['start_time']} - {title_short}"
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º event_id –≤–º–µ—Å—Ç–æ id –∑–∞–ø–∏—Å–∏
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f'unreg_{reg["id"]}')])

    for wait in waiting_list:
        title_short = wait['title'][:30] + "..." if len(wait['title']) > 30 else wait['title']
        button_text = f"‚è≥ {wait['date']} {wait['start_time']} - {title_short} (–æ—á–µ—Ä–µ–¥—å: {wait['position']})"
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º event_id –≤–º–µ—Å—Ç–æ id –∑–∞–ø–∏—Å–∏
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f'unreg_{wait["id"]}')])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')])
    return InlineKeyboardMarkup(keyboard)


def registration_cancel_keyboard():
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data='cancel_registration')]
    ]
    return InlineKeyboardMarkup(keyboard)


def admin_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥–∏", callback_data='admin_queues')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", callback_data='admin_stats')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    return InlineKeyboardMarkup(keyboard)
